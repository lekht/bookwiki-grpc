// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: wiki.proto

package wiki_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WikiHandler_GetBooksByAuthor_FullMethodName = "/wiki_grpc.WikiHandler/GetBooksByAuthor"
	WikiHandler_GetAuthorsByBook_FullMethodName = "/wiki_grpc.WikiHandler/GetAuthorsByBook"
)

// WikiHandlerClient is the client API for WikiHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiHandlerClient interface {
	GetBooksByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BookListResponse, error)
	GetAuthorsByBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*AuthorListResponse, error)
}

type wikiHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiHandlerClient(cc grpc.ClientConnInterface) WikiHandlerClient {
	return &wikiHandlerClient{cc}
}

func (c *wikiHandlerClient) GetBooksByAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BookListResponse, error) {
	out := new(BookListResponse)
	err := c.cc.Invoke(ctx, WikiHandler_GetBooksByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiHandlerClient) GetAuthorsByBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*AuthorListResponse, error) {
	out := new(AuthorListResponse)
	err := c.cc.Invoke(ctx, WikiHandler_GetAuthorsByBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikiHandlerServer is the server API for WikiHandler service.
// All implementations must embed UnimplementedWikiHandlerServer
// for forward compatibility
type WikiHandlerServer interface {
	GetBooksByAuthor(context.Context, *AuthorRequest) (*BookListResponse, error)
	GetAuthorsByBook(context.Context, *BookRequest) (*AuthorListResponse, error)
	mustEmbedUnimplementedWikiHandlerServer()
}

// UnimplementedWikiHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedWikiHandlerServer struct {
}

func (UnimplementedWikiHandlerServer) GetBooksByAuthor(context.Context, *AuthorRequest) (*BookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedWikiHandlerServer) GetAuthorsByBook(context.Context, *BookRequest) (*AuthorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsByBook not implemented")
}
func (UnimplementedWikiHandlerServer) mustEmbedUnimplementedWikiHandlerServer() {}

// UnsafeWikiHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiHandlerServer will
// result in compilation errors.
type UnsafeWikiHandlerServer interface {
	mustEmbedUnimplementedWikiHandlerServer()
}

func RegisterWikiHandlerServer(s grpc.ServiceRegistrar, srv WikiHandlerServer) {
	s.RegisterService(&WikiHandler_ServiceDesc, srv)
}

func _WikiHandler_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiHandlerServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiHandler_GetBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiHandlerServer).GetBooksByAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiHandler_GetAuthorsByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiHandlerServer).GetAuthorsByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiHandler_GetAuthorsByBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiHandlerServer).GetAuthorsByBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WikiHandler_ServiceDesc is the grpc.ServiceDesc for WikiHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiki_grpc.WikiHandler",
	HandlerType: (*WikiHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _WikiHandler_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsByBook",
			Handler:    _WikiHandler_GetAuthorsByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wiki.proto",
}
